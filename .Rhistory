ft <- align(ft_result, align = 'center', part = 'all')
ft <- border(ft, border = fp_border(color = '#444E65'), part = 'all')
ft <- style(ft, pr_c = def_cell_hd, pr_t = def_txt_hd, part = 'head')
# set default styling for the body
ft <- style(ft, pr_c = def_cell_bdy, pr_t = def_txt_bdy, part = 'body')
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
# formatting for increasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
# formatting for decreasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "i"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color="white", font.family = 'Wingdings 3', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[2], border = fp_border(color = '#444E65')))
}
# formatting for insufficient data for trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "x"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color='#A5A5A5', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[4], border = fp_border(color = '#444E65')))
}
# final formatting
ft <- width(ft, width = 0.6)
ft <- height(ft, height = ht_head, part = 'head')
ft <- height(ft, height = ht_body, part = 'body')
ft_header <- width(ft_header, j = ~ loc_id, width = 0.55)
ft_header <- width(ft_header, j = ~ loc_name, width = 1.1)
ft_header <- height(ft_header, height = ht_head, part = 'head')
ft_header <- height(ft_header, height = ht_body, part = 'body')
ls_ft <- list(ft_header, ft)
return(ls_ft)
# tbl_station <- generate_station_table(sk_result, stations)
# tbl_result <- generate_results_table(sk_result, stations, param)
# Generate tables and relabel columns
# Rename columns for both tables
if(is_swmp){
tbl_station <- generate_station_table(sk_result, stations)
tbl_result <- generate_results_table(sk_result, stations, param)
par_nms <- ft_col_names(param = param)
} else {
tbl_station <- data.frame(loc_id = stn_name, loc_name = stn_abbrev, stringsAsFactors = F)
tbl_station <- tbl_station[order(tbl_station$loc_name), ]
tbl_result <- sk_result[sk_result$station %in% stations, ]
tbl_result <- tbl_result[order(tbl_result$station), ]
tbl_result <- tbl_result[param]
par_nms <- par_names
}
names(tbl_station) <- c('Location ID', 'Location Name')
names(tbl_result) <- par_nms
# STATIONS TBL ----
# make flextable object
ft_header <- flextable::flextable(data = tbl_station)
# change column names to words
header_col_names <- ft_header$header$dataset
header_col_names[1, ] <- c('Location ID', 'Location Name')
ft_header$header$dataset <- header_col_names
# format
def_txt_hd <- fp_text(color = '#404040', bold = T, font.size = font_sz_head)
def_txt_bdy <- fp_text(color = '#404040', bold = T, font.size = font_sz_stn)
def_par <- fp_par(text.align = 'center')
def_cell <- fp_cell(background.color = "white", border = fp_border(color = '#444E65'))
ft_header <- style(ft_header, pr_c = def_cell, pr_t = def_txt_hd, pr_p = def_par, part = 'head')
ft_header <- style(ft_header, pr_c = def_cell, pr_t = def_txt_bdy, pr_p = def_par, part = 'body')
# RESULTS TBL ----
# make flextable object for SK results
ft_result <- flextable(data = tbl_result)
# # generate a data.frame with preferred names for head
# if(is_swmp) {
#   nms <- ft_col_names(param = param)
# } else {
#   if(is.null(par_names))
#     stop('par_names is NULL. Please provide a vector of parameter names')
#
#   nms <- par_names
# }
# ft_result$header$dataset <- data.frame(as.list(nms))
ft_result$header$col_keys <- nms
# set styling elements
def_par <- fp_par(text.align = 'center')
def_txt_hd <- fp_text(color = '#404040', bold = T, font.size = font_sz_head)
def_cell_hd <- fp_cell(background.color = 'white', border = fp_border(color = '#444E65')
, margin.top = 2, margin.bottom = 2)
def_txt_bdy <- fp_text(color = '#444E65', font.size = font_sz_result)
def_cell_bdy <- fp_cell(background.color = trend_col[3], border = fp_border(color = '#444E65'))
# set alignment and border for all parts of the table
ft <- align(ft_result, align = 'center', part = 'all')
ft <- border(ft, border = fp_border(color = '#444E65'), part = 'all')
ft <- style(ft, pr_c = def_cell_hd, pr_t = def_txt_hd, part = 'head')
# set default styling for the body
ft <- style(ft, pr_c = def_cell_bdy, pr_t = def_txt_bdy, part = 'body')
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
# formatting for increasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
# formatting for decreasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "i"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color="white", font.family = 'Wingdings 3', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[2], border = fp_border(color = '#444E65')))
}
# formatting for insufficient data for trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "x"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color='#A5A5A5', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[4], border = fp_border(color = '#444E65')))
}
# final formatting
ft <- width(ft, width = 0.6)
ft <- height(ft, height = ht_head, part = 'head')
ft <- height(ft, height = ht_body, part = 'body')
# ft_header <- width(ft_header, j = ~ loc_id, width = 0.55)
# ft_header <- width(ft_header, j = ~ loc_name, width = 1.1)
ft_header <- width(ft_header, j = 1, width = 0.55)
ft_header <- width(ft_header, j = 2, width = 1.1)
ft_header <- height(ft_header, height = ht_head, part = 'head')
ft_header <- height(ft_header, height = ht_body, part = 'body')
ls_ft <- list(ft_header, ft)
ls_ft[[1]]
tbl_station <- data.frame(loc_id = stn_abbrev, loc_name = stn_name, stringsAsFactors = F)
# Rename columns for both tables
if(is_swmp){
tbl_station <- generate_station_table(sk_result, stations)
tbl_result <- generate_results_table(sk_result, stations, param)
par_nms <- ft_col_names(param = param)
} else {
tbl_station <- data.frame(loc_id = stn_abbrev, loc_name = stn_name, stringsAsFactors = F)
tbl_station <- tbl_station[order(tbl_station$loc_name), ]
tbl_result <- sk_result[sk_result$station %in% stations, ]
tbl_result <- tbl_result[order(tbl_result$station), ]
tbl_result <- tbl_result[param]
par_nms <- par_names
}
names(tbl_station) <- c('Location ID', 'Location Name')
names(tbl_result) <- par_nms
# STATIONS TBL ----
# make flextable object
ft_header <- flextable::flextable(data = tbl_station)
# change column names to words
header_col_names <- ft_header$header$dataset
header_col_names[1, ] <- c('Location ID', 'Location Name')
ft_header$header$dataset <- header_col_names
# format
def_txt_hd <- fp_text(color = '#404040', bold = T, font.size = font_sz_head)
def_txt_bdy <- fp_text(color = '#404040', bold = T, font.size = font_sz_stn)
def_par <- fp_par(text.align = 'center')
def_cell <- fp_cell(background.color = "white", border = fp_border(color = '#444E65'))
ft_header <- style(ft_header, pr_c = def_cell, pr_t = def_txt_hd, pr_p = def_par, part = 'head')
ft_header <- style(ft_header, pr_c = def_cell, pr_t = def_txt_bdy, pr_p = def_par, part = 'body')
# RESULTS TBL ----
# make flextable object for SK results
ft_result <- flextable(data = tbl_result)
# # generate a data.frame with preferred names for head
# if(is_swmp) {
#   nms <- ft_col_names(param = param)
# } else {
#   if(is.null(par_names))
#     stop('par_names is NULL. Please provide a vector of parameter names')
#
#   nms <- par_names
# }
# ft_result$header$dataset <- data.frame(as.list(nms))
ft_result$header$col_keys <- nms
# set styling elements
def_par <- fp_par(text.align = 'center')
def_txt_hd <- fp_text(color = '#404040', bold = T, font.size = font_sz_head)
def_cell_hd <- fp_cell(background.color = 'white', border = fp_border(color = '#444E65')
, margin.top = 2, margin.bottom = 2)
def_txt_bdy <- fp_text(color = '#444E65', font.size = font_sz_result)
def_cell_bdy <- fp_cell(background.color = trend_col[3], border = fp_border(color = '#444E65'))
# set alignment and border for all parts of the table
ft <- align(ft_result, align = 'center', part = 'all')
ft <- border(ft, border = fp_border(color = '#444E65'), part = 'all')
ft <- style(ft, pr_c = def_cell_hd, pr_t = def_txt_hd, part = 'head')
# set default styling for the body
ft <- style(ft, pr_c = def_cell_bdy, pr_t = def_txt_bdy, part = 'body')
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
# formatting for increasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
# formatting for decreasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "i"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color="white", font.family = 'Wingdings 3', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[2], border = fp_border(color = '#444E65')))
}
# formatting for insufficient data for trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ ', col_names[[i]], ' == "x"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color='#A5A5A5', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[4], border = fp_border(color = '#444E65')))
}
# final formatting
ft <- width(ft, width = 0.6)
ft <- height(ft, height = ht_head, part = 'head')
ft <- height(ft, height = ht_body, part = 'body')
# ft_header <- width(ft_header, j = ~ loc_id, width = 0.55)
# ft_header <- width(ft_header, j = ~ loc_name, width = 1.1)
ft_header <- width(ft_header, j = 1, width = 0.55)
ft_header <- width(ft_header, j = 2, width = 1.1)
ft_header <- height(ft_header, height = ht_head, part = 'head')
ft_header <- height(ft_header, height = ht_body, part = 'body')
ls_ft <- list(ft_header, ft)
ls_ft[[1]]
length(names(tbl_result))
col_names[[i]]
condition
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
i <- 2
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
condition
result
?style
formula('Dissolved Oxygen == "h"')
formula('~Dissolved Oxygen == "h"')
formula('~`Dissolved Oxygen` == "h"')
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '`` == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
col_names[[i]]
paste('~ `', col_names[[i]], '` == "h"', sep = '')
i <- 3
paste('~ ', col_names[[i]], ' == "h"', sep = '')
col_names
i <- 2
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
paste('~ ', col_names[[i]], ' == "h"', sep = '')
condition <- formula(paste('~ `', col_names[[i]], '`` == "h"', sep = ''))
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
i <- 3
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- formula(paste('~ `', col_names[[i]], '`', sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
View(ft)
ft
result
condition
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
col_names
class(tbl_result)
param
col_names <- param
condition <- formula(paste('~ ', col_names[[i]], ' == "h"', sep = ''))
result <- formula(paste('~ ', col_names[[i]], sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
View(tbl_result)
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- formula(paste('~ `', col_names[[i]], '`', sep = ''))
style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- formula(paste('~ `', col_names[[i]], '`', sep = ''))
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
ft[`Water Temperature`]
ft[`wtem_n`]
?regulartable
names(ft)
names(tbl_result)
names(tbl_result)[[i]]
ft <- style(ft, i = ~col_names[[i]] == 'h', j = ~ col_names[[i]] #condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
ft <- style(ft, i = ~ col_names[[i]] == 'h', j = col_names[[i]] #condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
col_names[i]
ft <- style(ft, i = ~ col_names[i] == 'h', j = col_names[i], #condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
ft <- style(ft, i = ~ col_names[c] == 'h', j = col_names[c], #condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
c <- 1
ft <- style(ft, i = ~ col_names[c] == 'h', j = col_names[c], #condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, i = condition, j = result, #condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
ft
# tbl_station <- generate_station_table(sk_result, stations)
# tbl_result <- generate_results_table(sk_result, stations, param)
# Generate tables and relabel columns
# Rename columns for both tables
if(is_swmp){
tbl_station <- generate_station_table(sk_result, stations)
tbl_result <- generate_results_table(sk_result, stations, param)
par_nms <- ft_col_names(param = param)
} else {
tbl_station <- data.frame(loc_id = stn_abbrev, loc_name = stn_name, stringsAsFactors = F)
tbl_station <- tbl_station[order(tbl_station$loc_name), ]
tbl_result <- sk_result[sk_result$station %in% stations, ]
tbl_result <- tbl_result[order(tbl_result$station), ]
tbl_result <- tbl_result[param]
par_nms <- par_names
}
names(tbl_station) <- c('Location ID', 'Location Name')
names(tbl_result) <- par_nms
# STATIONS TBL ----
# make flextable object
ft_header <- flextable::flextable(data = tbl_station)
# change column names to words
header_col_names <- ft_header$header$dataset
header_col_names[1, ] <- c('Location ID', 'Location Name')
ft_header$header$dataset <- header_col_names
# format
def_txt_hd <- fp_text(color = '#404040', bold = T, font.size = font_sz_head)
def_txt_bdy <- fp_text(color = '#404040', bold = T, font.size = font_sz_stn)
def_par <- fp_par(text.align = 'center')
def_cell <- fp_cell(background.color = "white", border = fp_border(color = '#444E65'))
ft_header <- style(ft_header, pr_c = def_cell, pr_t = def_txt_hd, pr_p = def_par, part = 'head')
ft_header <- style(ft_header, pr_c = def_cell, pr_t = def_txt_bdy, pr_p = def_par, part = 'body')
# RESULTS TBL ----
# make flextable object for SK results
ft_result <- flextable(data = tbl_result)
# # generate a data.frame with preferred names for head
# if(is_swmp) {
#   nms <- ft_col_names(param = param)
# } else {
#   if(is.null(par_names))
#     stop('par_names is NULL. Please provide a vector of parameter names')
#
#   nms <- par_names
# }
# ft_result$header$dataset <- data.frame(as.list(nms))
ft_result$header$col_keys <- nms
# set styling elements
def_par <- fp_par(text.align = 'center')
def_txt_hd <- fp_text(color = '#404040', bold = T, font.size = font_sz_head)
def_cell_hd <- fp_cell(background.color = 'white', border = fp_border(color = '#444E65')
, margin.top = 2, margin.bottom = 2)
def_txt_bdy <- fp_text(color = '#444E65', font.size = font_sz_result)
def_cell_bdy <- fp_cell(background.color = trend_col[3], border = fp_border(color = '#444E65'))
# set alignment and border for all parts of the table
ft <- align(ft_result, align = 'center', part = 'all')
ft <- border(ft, border = fp_border(color = '#444E65'), part = 'all')
ft <- style(ft, pr_c = def_cell_hd, pr_t = def_txt_hd, part = 'head')
# set default styling for the body
ft <- style(ft, pr_c = def_cell_bdy, pr_t = def_txt_bdy, part = 'body')
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
# formatting for increasing trends
for(c in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
# formatting for decreasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "i"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color="white", font.family = 'Wingdings 3', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[2], border = fp_border(color = '#444E65')))
}
# formatting for insufficient data for trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "x"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color='#A5A5A5', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[4], border = fp_border(color = '#444E65')))
}
# final formatting
ft <- width(ft, width = 0.6)
ft <- height(ft, height = ht_head, part = 'head')
ft <- height(ft, height = ht_body, part = 'body')
# ft_header <- width(ft_header, j = ~ loc_id, width = 0.55)
# ft_header <- width(ft_header, j = ~ loc_name, width = 1.1)
ft_header <- width(ft_header, j = 1, width = 0.55)
ft_header <- width(ft_header, j = 2, width = 1.1)
ft_header <- height(ft_header, height = ht_head, part = 'head')
ft_header <- height(ft_header, height = ht_body, part = 'body')
ls_ft <- list(ft_header, ft)
ls_ft[[1]]
ls_ft[[2]]
# set alignment and border for all parts of the table
ft <- align(ft_result, align = 'center', part = 'all')
ft <- border(ft, border = fp_border(color = '#444E65'), part = 'all')
ft <- style(ft, pr_c = def_cell_hd, pr_t = def_txt_hd, part = 'head')
# set default styling for the body
ft <- style(ft, pr_c = def_cell_bdy, pr_t = def_txt_bdy, part = 'body')
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
# formatting for increasing trends
for(c in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
ft
i
# formatting for decreasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "i"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color="white", font.family = 'Wingdings 3', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[2], border = fp_border(color = '#444E65')))
}
ft
# set alignment and border for all parts of the table
ft <- align(ft_result, align = 'center', part = 'all')
ft <- border(ft, border = fp_border(color = '#444E65'), part = 'all')
ft <- style(ft, pr_c = def_cell_hd, pr_t = def_txt_hd, part = 'head')
# set default styling for the body
ft <- style(ft, pr_c = def_cell_bdy, pr_t = def_txt_bdy, part = 'body')
# set custom styling based on SK results
## will need to loop 3 times, one for each potential value
col_names <- names(tbl_result)
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
ft
# formatting for increasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "h"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color = "white", font.family = 'Wingdings 3', font.size = font_sz_result, bold = T),
pr_c = fp_cell(background.color = trend_col[1], border = fp_border(color = '#444E65')))
}
# formatting for decreasing trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "i"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color="white", font.family = 'Wingdings 3', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[2], border = fp_border(color = '#444E65')))
}
# formatting for insufficient data for trends
for(i in 1:length(names(tbl_result))) {
condition <- formula(paste('~ `', col_names[[i]], '` == "x"', sep = ''))
result <- col_names[[i]]
ft <- style(ft, condition, result,
pr_t = fp_text(color='#A5A5A5', font.size = font_sz_result),
pr_c = fp_cell(background.color = trend_col[4], border = fp_border(color = '#444E65')))
}
ft
!is_swmp
